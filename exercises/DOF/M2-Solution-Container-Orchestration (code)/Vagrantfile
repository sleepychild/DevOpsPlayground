# -*- mode: ruby -*-
# vi: set ft=ruby :

$common = <<SCRIPT
echo "* Disable auto-update timers and service if present ..."
systemctl disable --now apt-daily-upgrade.timer &> /dev/null || true
systemctl disable --now apt-daily.timer &> /dev/null || true
systemctl disable --now unattended-upgrades.service &> /dev/null || true
sed -i s/1/0/g /etc/apt/apt.conf.d/20auto-upgrades || true

echo "* Add hosts ..."
echo "192.168.99.101 k8s1.dof.lab k8s1" >> /etc/hosts
echo "192.168.99.102 k8s2.dof.lab k8s2" >> /etc/hosts

echo "Install the required system packages ..."
apt-get update -y
apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common

echo "Install Docker official GPG key ..."
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

echo "Add the Docker repository ..."
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

echo "Install Docker ..."
apt-get update -y
apt-get install -y docker-ce docker-ce-cli containerd.io

echo "Modify Docker configuration ..."
cat << EOF | tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"]
}
EOF

systemctl daemon-reload 
systemctl restart docker
systemctl enable docker

echo "Install Kubernetes official GPG key ..."
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

echo "Add Kubernetes repository ..."
cat <<EOF | tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

echo "Install Kubernetes packages ..."
apt-get update -y
apt-get install -y kubelet kubeadm kubectl

echo "Change system settings ..."
cat << EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
sysctl --system

echo "Turn off the swap ..."
swapoff -a
sed -i '/swap/ s/^/#/' /etc/fstab

echo "* Add vagrant user to docker group ..."
usermod -aG docker vagrant
SCRIPT

Vagrant.configure(2) do |config|
    
  config.ssh.insert_key = false

  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 2
  end

  config.vm.define "k8s1" do |k8s1|
    k8s1.vm.box = "shekeriev/ubuntu-20-04-server"
    k8s1.vm.hostname = "k8s1.dof.lab"
    k8s1.vm.network "private_network", ip: "192.168.99.101"
    k8s1.vm.synced_folder "vagrant/", "/vagrant"
    k8s1.vm.provision "shell", inline: $common
    k8s1.vm.provision "shell", inline: <<EOS

echo "* Initialize Kubernetes cluster ..."
kubeadm init --apiserver-advertise-address=192.168.99.101 --pod-network-cidr 10.244.0.0/16

echo "* Copy configuration for root ..."
mkdir -p /root/.kube
cp -i /etc/kubernetes/admin.conf /root/.kube/config
chown root:root /root/.kube/config

echo "* Copy configuration for vagrant ..."
mkdir -p /home/vagrant/.kube
cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
chown vagrant:vagrant /home/vagrant/.kube/config

echo " Remove the schedule taint from the node ..."
kubectl taint nodes --all node-role.kubernetes.io/master-

echo "* Install POD network plugin (Calico) ..."
kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
wget https://docs.projectcalico.org/manifests/custom-resources.yaml -O /tmp/custom-resources.yaml
sed -i 's/192.168.0.0/10.244.0.0/g' /tmp/custom-resources.yaml
kubectl create -f /tmp/custom-resources.yaml

echo "* Install Dashboard ..."
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml

echo "* Create Dashboard admin user ..."
cat << EOF > /vagrant/dashboard-admin-user.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
EOF

echo "* Create Dashboard admin user role ..."
cat << EOF > /vagrant/dashboard-admin-role.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard
EOF

echo "* Add both the user and role ..."
kubectl apply -f /vagrant/dashboard-admin-user.yml
kubectl apply -f /vagrant/dashboard-admin-role.yml

echo "* Save the user token ..."
kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}') > /vagrant/admin-user-token.txt

echo "* Create custom token ..."
kubeadm token create abcdef.1234567890abcdef

echo "* Save the hash to a file ..."
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //' > /vagrant/hash.txt

EOS
  end

  config.vm.define "k8s2" do |k8s2|
    k8s2.vm.box = "shekeriev/ubuntu-20-04-server"
    k8s2.vm.hostname = "k8s2.dof.lab"
    k8s2.vm.network "private_network", ip: "192.168.99.102"
    k8s2.vm.synced_folder "vagrant/", "/vagrant"
    k8s2.vm.provision "shell", inline: $common
    k8s2.vm.provision "shell", inline: <<EOS

echo "* Join the worker node (k8s2) ..."
kubeadm join 192.168.99.101:6443 --token abcdef.1234567890abcdef --discovery-token-ca-cert-hash sha256:`cat /vagrant/hash.txt`

EOS
  end

end